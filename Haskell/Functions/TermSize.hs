-- GENERATED by C->Haskell Compiler, version 0.16.0 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Functions/TermSize.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}
----- to compile:
-- gcc -arch i386 -c Functions/TermSize.c -o Functions/TermSize_CBits.o
-- c2hs -l Functions/TermSize.chs
-- ghc Functions/TermSize.hs Functions/TermSize_CBits.o -main-is Functions.TermSize -o TermSize
module Functions.TermSize where

import System.Posix.Types
import Foreign.C
import Foreign.Storable
import Foreign


data WinSize = WinSize 
    { ws_row    :: CUShort
    , ws_col    :: CUShort
    } deriving (Eq, Show)

type WinSizePtr = Ptr (WinSize)
{-# LINE 25 "Functions/TermSize.chs" #-}

instance Storable WinSize where
    sizeOf    _ = 8
{-# LINE 28 "Functions/TermSize.chs" #-}
    alignment _ = 8
{-# LINE 29 "Functions/TermSize.chs" #-}
    peek ptr = do
        r <- (\ptr -> do {peekByteOff ptr 0 ::IO CUShort}) ptr
        c <- (\ptr -> do {peekByteOff ptr 2 ::IO CUShort}) ptr
        return (WinSize r c)
    poke ptr (WinSize r c) = do
        (\ptr val -> do {pokeByteOff ptr 0 (val::CUShort)}) ptr r
        (\ptr val -> do {pokeByteOff ptr 2 (val::CUShort)}) ptr c

foreign import ccall "sys/ioctl.h ioctl" 
    ioctl :: Fd -> CULong -> Ptr a -> IO CInt

termSize :: Fd -> IO WinSize
termSize fd = alloca $ \wsz -> do
    throwErrnoIf (<0) "ioctl" $
        ioctl_TIOCGWINSZ (fromIntegral fd) (wsz :: Ptr WinSize)
    
    peek wsz

main = do
    ws <- termSize 0
    
    print ws
foreign import ccall safe "Functions/TermSize.chs.h ioctl_TIOCGWINSZ"
  ioctl_TIOCGWINSZ :: (CInt -> ((WinSizePtr) -> (IO CInt)))
